// Generated by CoffeeScript 2.0.1
(function() {
  var Page, Promise, Text, Time, ZeroFrame, call_after_interval, calling, editor, last_time, left_menuify, seedbox, top_menuify, uploader, video_lister, video_playing, videobox,
    indexOf = [].indexOf,
    boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

  last_time = {};

  calling = {};

  call_after_interval = {};

  // Rate limit function call and don't allow to run in parallel (until callback is called)
  window.RateLimitCb = function(interval, fn, args = []) {
    var cb;
    cb = function() { // Callback when function finished
      var left;
      left = interval - (Date.now() - last_time[fn]);
      // console.log "CB, left", left, "Calling:", calling[fn]
      if (left <= 0) { // No time left from rate limit interval
        delete last_time[fn];
        if (calling[fn]) {
          RateLimitCb(interval, fn, calling[fn]);
        }
        return delete calling[fn];
      } else {
        return setTimeout((function() {
          delete last_time[fn];
          if (calling[fn]) {
            RateLimitCb(interval, fn, calling[fn]);
          }
          return delete calling[fn];
        }), left);
      }
    };
    if (last_time[fn]) {
      return calling[fn] = args; // Schedule call and update arguments
// Not called within interval, call instantly
    } else {
      last_time[fn] = Date.now();
      return fn.apply(this, [cb, ...args]);
    }
  };

  window.RateLimit = function(interval, fn) {
    if (!calling[fn]) {
      call_after_interval[fn] = false;
      fn(); // First call is not delayed
      return calling[fn] = setTimeout((function() {
        if (call_after_interval[fn]) {
          fn();
        }
        delete calling[fn];
        return delete call_after_interval[fn];
      }), interval); // Called within iterval, delay the call
    } else {
      return call_after_interval[fn] = true;
    }
  };

  Promise = class Promise {
    static join(...tasks) {
      var args, fn1, k, len, num_uncompleted, promise, task, task_id;
      num_uncompleted = tasks.length;
      args = new Array(num_uncompleted);
      promise = new Promise();
      fn1 = function(task_id) {
        return task.then(function() {
          var callback, l, len1, ref2, results;
          args[task_id] = Array.prototype.slice.call(arguments);
          num_uncompleted--;
          if (num_uncompleted === 0) {
            ref2 = promise.callbacks;
            results = [];
            for (l = 0, len1 = ref2.length; l < len1; l++) {
              callback = ref2[l];
              results.push(callback.apply(promise, args));
            }
            return results;
          }
        });
      };
      for (task_id = k = 0, len = tasks.length; k < len; task_id = ++k) {
        task = tasks[task_id];
        fn1(task_id);
      }
      return promise;
    }

    constructor() {
      this.resolved = false;
      this.end_promise = null;
      this.result = null;
      this.callbacks = [];
    }

    resolve() {
      var back, callback, k, len, ref2;
      if (this.resolved) {
        return false;
      }
      this.resolved = true;
      this.data = arguments;
      if (!arguments.length) {
        this.data = [true];
      }
      this.result = this.data[0];
      ref2 = this.callbacks;
      for (k = 0, len = ref2.length; k < len; k++) {
        callback = ref2[k];
        back = callback.apply(callback, this.data);
      }
      if (this.end_promise && back && back.then) {
        return back.then((back_res) => {
          return this.end_promise.resolve(back_res);
        });
      }
    }

    fail() {
      return this.resolve(false);
    }

    then(callback) {
      if (this.resolved === true) {
        return callback.apply(callback, this.data);
      }
      this.callbacks.push(callback);
      this.end_promise = new Promise();
      return this.end_promise;
    }

  };

  window.Promise = Promise;

  Text = class Text {
    constructor() {
      this.renderMarked = this.renderMarked.bind(this);
      this.renderLinks = this.renderLinks.bind(this);
    }

    toColor(text, saturation = 30, lightness = 50) {
      var hash, i, k, ref2;
      hash = 0;
      for (i = k = 0, ref2 = text.length - 1; 0 <= ref2 ? k <= ref2 : k >= ref2; i = 0 <= ref2 ? ++k : --k) {
        hash += text.charCodeAt(i) * i;
        hash = hash % 1777;
      }
      return "hsl(" + (hash % 360) + `,${saturation}%,${lightness}%)`;
    }

    renderMarked(text, options = {}) {
      if (!text) {
        return "";
      }
      options["gfm"] = true;
      options["breaks"] = true;
      options["sanitize"] = true;
      options["renderer"] = marked_renderer;
      text = this.fixReply(text);
      text = marked(text, options);
      text = text.replace(/(@[^\x00-\x1f^\x21-\x2f^\x3a-\x40^\x5b-\x60^\x7b-\x7f]{1,16}):/g, '<b class="reply-name">$1</b>:'); // Highlight usernames
      return this.fixHtmlLinks(text);
    }

    renderLinks(text) {
      text = text.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;'); // Sanitize html tags
      text = text.replace(/(https?:\/\/[^\s)]+)/g, function(match) {
        return `<a href="${match.replace(/&amp;/g, '&')}">${match
// UnSanitize &amp; -> & in links
}</a>`;
      });
      text = text.replace(/\n/g, '<br>');
      text = text.replace(/(@[^\x00-\x1f^\x21-\x2f^\x3a-\x40^\x5b-\x60^\x7b-\x7f]{1,16}):/g, '<b class="reply-name">$1</b>:');
      text = this.fixHtmlLinks(text);
      return text;
    }

    emailLinks(text) {
      return text.replace(/([a-zA-Z0-9]+)@zeroid.bit/g, "<a href='?to=$1' onclick='return Page.message_create.show(\"$1\")'>$1@zeroid.bit</a>");
    }

    // Convert zeronet html links to relaitve
    fixHtmlLinks(text) {
      // Fix site links
      text = text.replace(/href="http:\/\/(127.0.0.1|localhost):43110\/(Me.ZeroNetwork.bit|1MeFqFfFFGQfa1J3gJyYYUvb5Lksczq7nH)\/\?/gi, 'href="?');
      if (window.is_proxy) {
        text = text.replace(/href="http:\/\/(127.0.0.1|localhost):43110/gi, 'href="http://zero');
        text = text.replace(/http:\/\/zero\/([^\/]+\.bit)/, "http://$1");
        text = text.replace(/href="\/([A-Za-z0-9]{26,35})/g, 'href="http://zero/$1'); // Links without 127.0.0.1
      } else {
        text = text.replace(/href="http:\/\/(127.0.0.1|localhost):43110/g, 'href="');
      }
      // Add no-refresh linking to local links
      text = text.replace(/href="\?/g, 'onclick="return Page.handleLinkClick(window.event)" href="?');
      return text;
    }

    // Convert a single link to relative
    fixLink(link) {
      var back;
      if (window.is_proxy) {
        back = link.replace(/http:\/\/(127.0.0.1|localhost):43110/, 'http://zero');
        back = back.replace(/http:\/\/zero\/([^\/]+\.bit)/, "http://$1"); // Domain links
        back = back.replace(/\/([A-Za-z0-9]{26,35})/, "http://zero/$1"); // Links without 127.0.0.1
        return back;
      } else {
        return link.replace(/http:\/\/(127.0.0.1|localhost):43110/, '');
      }
    }

    toUrl(text) {
      return text.replace(/[^A-Za-z0-9]/g, "+").replace(/[+]+/g, "+").replace(/[+]+$/, "");
    }

    getSiteUrl(address) {
      if (window.is_proxy) {
        if (indexOf.call(address, ".") >= 0) { // Domain
          return "http://" + address + "/";
        } else {
          return "http://zero/" + address + "/";
        }
      } else {
        return "/" + address + "/";
      }
    }

    fixReply(text) {
      return text.replace(/(>.*\n)([^\n>])/gm, "$1\n$2");
    }

    toBitcoinAddress(text) {
      return text.replace(/[^A-Za-z0-9]/g, "");
    }

    jsonEncode(obj) {
      return unescape(encodeURIComponent(JSON.stringify(obj)));
    }

    jsonDecode(obj) {
      return JSON.parse(decodeURIComponent(escape(obj)));
    }

    fileEncode(obj) {
      if (typeof obj === "string") {
        return btoa(unescape(encodeURIComponent(obj)));
      } else {
        return btoa(unescape(encodeURIComponent(JSON.stringify(obj, void 0, '\t'))));
      }
    }

    utf8Encode(s) {
      return unescape(encodeURIComponent(s));
    }

    utf8Decode(s) {
      return decodeURIComponent(escape(s));
    }

    distance(s1, s2) {
      var char, extra_parts, k, key, len, match, next_find, next_find_i, val;
      s1 = s1.toLocaleLowerCase();
      s2 = s2.toLocaleLowerCase();
      next_find_i = 0;
      next_find = s2[0];
      match = true;
      extra_parts = {};
      for (k = 0, len = s1.length; k < len; k++) {
        char = s1[k];
        if (char !== next_find) {
          if (extra_parts[next_find_i]) {
            extra_parts[next_find_i] += char;
          } else {
            extra_parts[next_find_i] = char;
          }
        } else {
          next_find_i++;
          next_find = s2[next_find_i];
        }
      }
      if (extra_parts[next_find_i]) {
        extra_parts[next_find_i] = ""; // Extra chars on the end doesnt matter
      }
      extra_parts = (function() {
        var results;
        results = [];
        for (key in extra_parts) {
          val = extra_parts[key];
          results.push(val);
        }
        return results;
      })();
      if (next_find_i >= s2.length) {
        return extra_parts.length + extra_parts.join("").length;
      } else {
        return false;
      }
    }

    queryParse(query) {
      var k, key, len, params, part, parts, val;
      params = {};
      parts = query.split('&');
      for (k = 0, len = parts.length; k < len; k++) {
        part = parts[k];
        [key, val] = part.split("=");
        if (val) {
          params[decodeURIComponent(key)] = decodeURIComponent(val);
        } else {
          params["url"] = decodeURIComponent(key);
          params["urls"] = params["url"].split("/");
        }
      }
      return params;
    }

    queryEncode(params) {
      var back, key, val;
      back = [];
      if (params.url) {
        back.push(params.url);
      }
      for (key in params) {
        val = params[key];
        if (!val || key === "url") {
          continue;
        }
        back.push(`${encodeURIComponent(key)}=${encodeURIComponent(val)}`);
      }
      return back.join("&");
    }

    highlight(text, search) {
      var back, i, k, len, part, parts;
      parts = text.split(RegExp(search, "i"));
      back = [];
      for (i = k = 0, len = parts.length; k < len; i = ++k) {
        part = parts[i];
        back.push(part);
        if (i < parts.length - 1) {
          back.push(h("span.highlight", {
            key: i
          }, search));
        }
      }
      return back;
    }

    sqlIn(values) {
      var value;
      return "(" + ((function() {
        var k, len, results;
        results = [];
        for (k = 0, len = values.length; k < len; k++) {
          value = values[k];
          results.push(`'${value}'`);
        }
        return results;
      })()).join(',') + ")";
    }

    formatSize(size) {
      var size_mb;
      size_mb = size / 1024 / 1024;
      if (size_mb >= 1000) {
        return (size_mb / 1024).toFixed(1) + " GB";
      } else if (size_mb >= 100) {
        return size_mb.toFixed(0) + " MB";
      } else if (size / 1024 >= 1000) {
        return size_mb.toFixed(2) + " MB";
      } else {
        return (size / 1024).toFixed(2) + " KB";
      }
    }

  };

  window.is_proxy = document.location.host === "zero" || window.location.pathname === "/";

  window.Text = new Text();

  Text = new Text();

  Time = class Time {
    since(timestamp) {
      var back, now, secs;
      now = +(new Date) / 1000;
      if (timestamp > 1000000000000) { // In ms
        timestamp = timestamp / 1000;
      }
      secs = now - timestamp;
      if (secs < 60) {
        back = "Just now";
      } else if (secs < 60 * 60) {
        back = `${Math.round(secs / 60)} minutes ago`;
      } else if (secs < 60 * 60 * 24) {
        back = `${Math.round(secs / 60 / 60)} hours ago`;
      } else if (secs < 60 * 60 * 24 * 3) {
        back = `${Math.round(secs / 60 / 60 / 24)} days ago`;
      } else {
        back = "on " + this.date(timestamp);
      }
      back = back.replace(/^1 ([a-z]+)s/, "1 $1"); // 1 days ago fix
      return back;
    }

    date(timestamp, format = "short") {
      var display, parts;
      if (timestamp > 1000000000000) { // In ms
        timestamp = timestamp / 1000;
      }
      parts = (new Date(timestamp * 1000)).toString().split(" ");
      if (format === "short") {
        display = parts.slice(1, 4);
      } else {
        display = parts.slice(1, 5);
      }
      return display.join(" ").replace(/( [0-9]{4})/, ",$1");
    }

    timestamp(date = "") {
      if (date === "now" || date === "") {
        return parseInt(+(new Date) / 1000);
      } else {
        return parseInt(Date.parse(date) / 1000);
      }
    }

  };

  window.Time = new Time();

  Time = new Time();

  // zeroframe.coffee
  ZeroFrame = class ZeroFrame {
    constructor(url) {
      this.onMessage = this.onMessage.bind(this);
      this.processQueue = this.processQueue.bind(this);
      this.onRequest = this.onRequest.bind(this);
      this.onOpenWebsocket = this.onOpenWebsocket.bind(this);
      this.onCloseWebsocket = this.onCloseWebsocket.bind(this);
      this.queue = [];
      this.url = url;
      this.waiting_cb = {};
      this.history_state = {};
      this.wrapper_nonce = document.location.href.replace(/.*wrapper_nonce=([A-Za-z0-9]+).*/, "$1");
      this.connect();
      this.next_message_id = 1;
      this.init();
      this.ready = false;
    }

    init() {
      return this;
    }

    connect() {
      this.target = window.parent;
      window.addEventListener("message", this.onMessage, false);
      this.send({
        "cmd": "innerReady"
      });
      // Save scrollTop
      window.addEventListener("beforeunload", (e) => {
        console.log("Save scrollTop", window.pageYOffset);
        this.history_state["scrollTop"] = window.pageYOffset;
        return this.cmd("wrapperReplaceState", [this.history_state, null]);
      });
      // Restore scrollTop
      return this.cmd("wrapperGetState", [], (state) => {
        return this.handleState(state);
      });
    }

    handleState(state) {
      if (state !== null) {
        this.history_state = state;
      }
      console.log("Restore scrollTop", state, window.pageYOffset);
      if (window.pageYOffset === 0 && state) {
        return window.scroll(window.pageXOffset, state.scrollTop);
      }
    }

    onMessage(e) {
      var cmd, message;
      message = e.data;
      cmd = message.cmd;
      if (cmd === "response") {
        if (this.waiting_cb[message.to] != null) {
          return this.waiting_cb[message.to](message.result);
        } else {
          return console.log("Websocket callback not found:", message);
        }
      } else if (cmd === "wrapperReady") { // Wrapper inited later
        return this.send({
          "cmd": "innerReady"
        });
      } else if (cmd === "ping") {
        return this.response(message.id, "pong");
      } else if (cmd === "wrapperOpenedWebsocket") {
        this.onOpenWebsocket();
        this.ready = true;
        return this.processQueue();
      } else if (cmd === "wrapperClosedWebsocket") {
        return this.onCloseWebsocket();
      } else if (cmd === "wrapperPopState") {
        this.handleState(message.params.state);
        return this.onRequest(cmd, message.params);
      } else {
        return this.onRequest(cmd, message.params);
      }
    }

    processQueue() {
      var cb, cmd, i, k, len, params, ref, ref1;
      ref = this.queue;
      for (i = k = 0, len = ref.length; k < len; i = ++k) {
        ref1 = ref[i];
        cmd = ref1[0];
        params = ref1[1];
        cb = ref1[2];
        this.cmd(cmd, params, cb);
      }
      return this.queue = [];
    }

    onRequest(cmd, message) {
      return console.log("Unknown request", message);
    }

    response(to, result) {
      return this.send({
        "cmd": "response",
        "to": to,
        "result": result
      });
    }

    cmd(cmd, params = {}, cb = null) {
      if (params === null) {
        params = {};
      }
      if (cb === null) {
        cb = null;
      }
      if (this.ready) {
        return this.send({
          "cmd": cmd,
          "params": params
        }, cb);
      } else {
        return this.queue.push([cmd, params, cb]);
      }
    }

    send(message, cb = null) {
      message.wrapper_nonce = this.wrapper_nonce;
      message.id = this.next_message_id;
      this.next_message_id += 1;
      this.target.postMessage(message, "*");
      if (cb) {
        return this.waiting_cb[message.id] = cb;
      }
    }

    onOpenWebsocket() {
      return console.log("Websocket open");
    }

    onCloseWebsocket() {
      return console.log("Websocket close");
    }

  };

  window.ZeroFrame = ZeroFrame;

  // menu_left.coffee
  left_menuify = class left_menuify {
    constructor() {
      this.render = this.render.bind(this);
    }

    render() {
      var item_head_version, item_home, item_home_link, item_seedbox, item_seedbox_link, item_videobox, item_videobox_link, menu_left, menu_left_items;
      menu_left = $("<div></div>");
      menu_left.attr("id", "menu_left");
      menu_left.attr("class", "menu_left");
      menu_left_items = $("<ul></ul>");
      menu_left_items.attr("id", "menu_left_items");
      menu_left_items.attr("class", "menu_left_items");
      item_head_version = $("<li></li>");
      item_head_version.attr("id", "item_head_version");
      item_head_version.attr("class", "list_item li_head");
      item_head_version.text("BETA v0.2.0");
      item_home = $("<li></li>");
      item_home.attr("id", "item_home");
      item_home.attr("class", "list_item li_home");
      item_home_link = $("<a></a>");
      item_home_link.attr("id", "item_home_link");
      item_home_link.attr("class", "item_link");
      item_home_link.attr("href", "?Home");
      item_home_link.text("Home");
      item_videobox = $("<div></div>");
      item_videobox.attr("id", "item_videobox");
      item_videobox.attr("class", "list_item li_videobox");
      item_videobox_link = $("<a></a>");
      item_videobox_link.attr("id", "item_videobox_link");
      item_videobox_link.attr("class", "item_link");
      item_videobox_link.attr("href", "?Box");
      item_videobox_link.text("VideoBox");
      item_seedbox = $("<div></div>");
      item_seedbox.attr("id", "item_seedbox");
      item_seedbox.attr("class", "list_item li_seedbox");
      item_seedbox_link = $("<a></a>");
      item_seedbox_link.attr("id", "item_seedbox_link");
      item_seedbox_link.attr("class", "item_link");
      item_seedbox_link.attr("href", "?Seed");
      item_seedbox_link.text("SeedBox");
      $("#nav").html("");
      $("#nav").append(menu_left);
      $("#menu_left").append(menu_left_items);
      $("#menu_left_items").append(item_head_version);
      $("#menu_left_items").append(item_home);
      $("#item_home").append(item_home_link);
      $("#menu_left_items").append(item_videobox);
      $("#item_videobox").append(item_videobox_link);
      $("#menu_left_items").append(item_seedbox);
      $("#item_seedbox").append(item_seedbox_link);
      $("#item_home_link").on("click", function() {
        return Page.nav(this.href);
      });
      $("#item_videobox_link").on("click", function() {
        return Page.nav(this.href);
      });
      return $("#item_seedbox_link").on("click", function() {
        return Page.nav(this.href);
      });
    }

  };

  left_menuify = new left_menuify();

  // menu_top.coffee
  top_menuify = class top_menuify {
    constructor() {
      this.render = this.render.bind(this);
    }

    render() {
      var logo, main_menu, menu_top, search_bar, search_button, search_icon, search_swap, search_swap_icon, search_wrap, toggle_button, toggle_icon, upload_icon, upload_link;
      menu_top = $("<div></div>");
      menu_top.attr("id", "menu_top");
      menu_top.attr("class", "menu_top");
      main_menu = $("<a></a>");
      main_menu.attr("id", "main_menu");
      main_menu.attr("class", "main_menu");
      main_menu.attr("href", "javascript:void(0)");
      logo = $("<a></a>");
      logo.attr("id", "site_logo");
      logo.attr("class", "logo pc");
      logo.attr("href", "?Home");
      search_bar = $("<input>");
      search_bar.attr("type", "text");
      search_bar.attr("id", "search_bar");
      search_bar.attr("class", "search_bar");
      search_bar.attr("placeholder", "What are you looking for?");
      search_button = $("<button></button>");
      search_button.attr("id", "search_button");
      search_button.attr("class", "search_button");
      search_icon = $("<div></div>");
      search_icon.attr("id", "search_icon");
      search_icon.attr("class", "search_icon");
      toggle_button = $("<div></div>");
      toggle_button.attr("id", "search_toggle");
      toggle_button.attr("class", "search_toggle");
      toggle_icon = $("<div></div>");
      toggle_icon.attr("id", "search_toggle_icon");
      toggle_icon.attr("class", "search_toggle_icon");
      search_wrap = $("<div></div>");
      search_wrap.attr("id", "search_wrap");
      search_wrap.attr("class", "search_wrap");
      upload_link = $("<a></a>");
      upload_link.attr("id", "upload_link");
      upload_link.attr("class", "upload_link");
      upload_link.attr("href", "?Upload");
      // upload_link.text "Upload video!"
      upload_icon = $("<div></div>");
      upload_icon.attr("id", "main_upload");
      upload_icon.attr("class", "main_upload");
      search_swap = $("<a></a>");
      search_swap.attr("id", "search_swap");
      search_swap.attr("class", "search_swap");
      search_swap.attr("href", "javascript:void(0)");
      search_swap_icon = $("<div></div>");
      search_swap_icon.attr("id", "main_search_swap");
      search_swap_icon.attr("class", "main_search_swap");
      $("#header").html("");
      $("#header").append(menu_top);
      $("#menu_top").append(main_menu);
      $("#menu_top").append(logo);
      $("#search").append(search_wrap);
      $("#menu_top").append(upload_link);
      $("#upload_link").html(upload_icon);
      $("#menu_top").append(search_swap);
      $("#search_swap").append(search_swap_icon);
      $("#search_wrap").append(toggle_button);
      $("#search_toggle").append(toggle_icon);
      $("#search_wrap").append(search_button);
      $("#search_button").append(search_icon);
      $("#search_wrap").append(search_bar);
      $("#search_bar").change(function() {
        if (Page.history_state["url"].indexOf("Home") > -1) {
          return video_lister.get_query();
        } else if (Page.history_state["url"].indexOf("Box") > -1) {
          return videobox.get_query();
        } else if (Page.history_state["url"].indexOf("Seed") > -1) {
          return seedbox.get_query();
        } else {
          return Page.set_url("?Home");
        }
      });
      $("#upload_link").on("click", function() {
        return Page.nav(this.href);
      });
      $("#site_logo").on("click", function() {
        return Page.nav(this.href);
      });
      $("#main_menu").on("click", function() {
        return $("#nav").toggle();
      });
      $("#search_toggle").on("click", function(e) {
        $("#search").toggle();
        $("#search").attr("class", "search");
        return e.preventDefault();
      });
      return $("#search_swap").on("click", function(e) {
        $("#search").toggle();
        $("#search").attr("class", "search_nomove");
        return e.preventDefault();
      });
    }

  };

  top_menuify = new top_menuify();

  // video_list.coffee
  video_lister = class video_lister {
    constructor() {
      this.more_videos_yes = this.more_videos_yes.bind(this);
      this.flush = this.flush.bind(this);
      this.get_query = this.get_query.bind(this);
      this.linkify = this.linkify.bind(this);
      this.link_click = this.link_click.bind(this);
      this.seed_click = this.seed_click.bind(this);
      this.update = this.update.bind(this);
      this.render = this.render.bind(this);
      this.max_videos = 10;
      //@last_max_videos=0
      this.query_string = "";
      this.counter = 1;
    }

    more_videos_yes() {
      this.max_videos += 10;
      this.counter = 1;
      return this.update();
    }

    flush(mode) {
      if (mode === "all") {
        this.max_videos = 10;
        return this.counter = 1;
      } else {
        return this.counter = 1;
      }
    }

    get_query() {
      var query_value;
      query_value = $("#search_bar").val();
      this.query_string = query_value;
      this.flush("all");
      return this.update();
    }

    linkify(to, display, tag_class = "", tag_id = "", tag_style = "") {
      var link;
      link = "<a id='" + tag_id + "' href='?Video=" + to + "'";
      if (tag_class && tag_class !== "") {
        link += " class='" + tag_class + "'";
      }
      if (tag_style && tag_style !== "") {
        link += " style='" + tag_style + "'";
      }
      if (tag_id && tag_id !== "") {
        link += " style='" + tag_id + "'";
      }
      link += ">" + display + "</a>";
      return link;
    }

    link_click() {
      return console.log("Prevented page refresh...");
    }

    seed_click(inner_path) {
      Page.cmd("fileNeed", inner_path + "|all", (res) => {
        return console.log(res);
      });
      return false;
    }

    update() {
      var query, query_string_no_space;
      console.log("[KopyKate: Updating video list]");
      query_string_no_space = this.query_string.replace(/\s/g, "%");
      query = "WHERE file.title LIKE '%" + query_string_no_space + "%'";
      return Page.cmd("dbQuery", ["SELECT * FROM file LEFT JOIN json USING (json_id) " + query + " ORDER BY date_added DESC"], (res1) => {
        return Page.cmd("optionalFileList", {
          filter: "",
          limit: 1000
        }, (res2) => {
          var file_is_downloading, file_name, file_peer, file_seed, file_seed_no_null, flush_page, i, j, k, len, optional_inner_path, optional_size, results, row1, row2, seed_button_display, seed_click, size_display, update_page, user_info, video_brief, video_channel_name, video_date_added, video_description, video_image, video_info, video_info_id, video_link, video_link_id, video_name, video_peers, video_peers_id, video_peers_info, video_row, video_row_id, video_seed_button, video_seed_button_id, video_size, video_string, video_thumbnail, video_thumbnail_id, video_title, video_user_address;
          $("#video_list").html("");
          $("#more_videos").html("<div class='more_videos text'>More videos!</div>");
          results = [];
          for (i = k = 0, len = res1.length; k < len; i = ++k) {
            row1 = res1[i];
            results.push((function() {
              var l, len1, results1;
              results1 = [];
              for (j = l = 0, len1 = res2.length; l < len1; j = ++l) {
                row2 = res2[j];
                optional_inner_path = row2['inner_path'];
                file_name = row2['inner_path'].replace(/.*\//, "");
                file_seed = row2['peer_seed'];
                file_peer = row2['peer'];
                file_is_downloading = row2['is_downloading'];
                optional_size = row2['bytes_downloaded'];
                video_name = row1['file_name'];
                video_title = row1['title'];
                video_size = row1['size'];
                video_brief = row1['description'];
                video_image = row1['image_link'];
                video_date_added = row1['date_added'];
                video_user_address = row1['directory'];
                video_channel_name = row1['cert_user_id'].split("@")[0];
                //i >= @last_max_videos
                if (video_name === file_name && this.counter < this.max_videos) {
                  file_seed_no_null = file_seed || 0;
                  if (optional_size >= video_size) {
                    size_display = Text.formatSize(video_size);
                    seed_button_display = false;
                  } else if (file_is_downloading) {
                    size_display = Text.formatSize(optional_size) + " / " + Text.formatSize(video_size);
                    seed_button_display = false;
                  } else if ((0 < optional_size && optional_size < video_size)) {
                    size_display = Text.formatSize(optional_size) + " / " + Text.formatSize(video_size);
                    seed_button_display = true;
                  } else {
                    size_display = Text.formatSize(video_size);
                    seed_button_display = true;
                  }
                  video_string = video_date_added + "_" + video_user_address;
                  video_row_id = "row_" + this.counter;
                  video_link_id = video_string;
                  video_row = $("<div></div>");
                  video_row.attr("id", video_row_id);
                  video_row.attr("class", "video_row");
                  video_thumbnail_id = "thumb_" + this.counter;
                  video_thumbnail = $("<a></a>");
                  video_thumbnail.attr("id", video_thumbnail_id);
                  video_thumbnail.attr("class", "video_thumbnail");
                  video_thumbnail.css("background-image", "url('" + video_image + "')");
                  video_thumbnail.attr("href", "?Video=" + video_string);
                  video_info_id = "info_" + this.counter;
                  video_info = $("<div></div>");
                  video_info.attr("id", video_info_id);
                  video_info.attr("class", "video_info");
                  video_link = this.linkify(video_string, video_title, "video_link", video_string);
                  video_peers_id = "peer_" + this.counter;
                  video_peers = $("<div></div>");
                  video_peers.attr("id", video_peers_id);
                  video_peers.attr("class", "video_brief");
                  video_seed_button_id = "seed_" + this.counter;
                  video_seed_button = $("<button></button>");
                  video_seed_button.attr("id", video_seed_button_id);
                  video_seed_button.attr("class", "video_seed_button");
                  video_seed_button.attr("value", optional_inner_path);
                  video_seed_button.text("+ SEED");
                  video_peers_info = $("<span> Peers " + file_seed_no_null + " / " + file_peer + " - " + size_display + "</span>");
                  user_info = $("<div></div>");
                  user_info.attr("id", "user_info");
                  user_info.attr("class", "video_brief");
                  user_info.text(video_channel_name.charAt(0).toUpperCase() + video_channel_name.slice(1) + " - " + Time.since(video_date_added));
                  video_description = $("<div></div>");
                  video_description.attr("id", "video_brief");
                  video_description.attr("class", "video_brief");
                  video_description.text(video_brief);
                  $("#video_list").append(video_row);
                  $("#" + video_row_id).append(video_thumbnail);
                  $("#" + video_row_id).append(video_info);
                  $("#" + video_info_id).append(video_link);
                  $("#" + video_info_id).append(user_info);
                  $("#" + video_info_id).append(video_peers);
                  if (seed_button_display) {
                    $("#" + video_peers_id).append(video_seed_button);
                  }
                  $("#" + video_peers_id).append(video_peers_info);
                  $("#" + video_info_id).append(video_description);
                  $("#" + video_link_id).text(video_title);
                  $("#" + video_link_id).on("click", function() {
                    return Page.nav(this.href);
                  });
                  $("#" + video_thumbnail_id).on("click", function() {
                    return Page.nav(this.href);
                  });
                  seed_click = this.seed_click;
                  flush_page = this.flush;
                  update_page = this.update;
                  $("#" + video_seed_button_id).on("click", function() {
                    console.log("Seeding: " + this.value);
                    seed_click(this.value);
                    flush_page();
                    return update_page();
                  });
                  results1.push(this.counter = this.counter + 1);
                } else {
                  results1.push(void 0);
                }
              }
              return results1;
            }).call(this));
          }
          return results;
        });
      });
    }

    render() {
      var footer, more_videos, more_videos_yes, query_value, video_list;
      query_value = $("#search_bar").val();
      this.query_string = query_value;
      video_list = $("<div></div>");
      video_list.attr("id", "video_list");
      video_list.attr("class", "video_list");
      //video_list.html "<div class='spinner'><div class='bounce1'></div><div class='bounce2'></div><div class='bounce3'></div></div>"
      footer = $("<div></div>");
      footer.attr("id", "footer");
      footer.attr("class", "footer");
      more_videos = $("<a></a>");
      more_videos.attr("id", "more_videos");
      more_videos.attr("class", "more_videos");
      more_videos.attr("href", "javascript:void(0)");
      $("#main").attr("class", "main");
      $("#main").html("");
      donav();
      //$("#main").attr "style", "width: calc(100% - 236.25px); margin-left: 236.25px"
      //$("#nav").show()
      $("#main").append(video_list);
      $("#main").append(footer);
      $("#footer").append(more_videos);
      $("#more_videos").html("<div class='spinner'><div class='bounce1'></div><div class='bounce2'></div><div class='bounce3'></div></div>");
      more_videos_yes = this.more_videos_yes;
      $("#more_videos").on("click", function() {
        $("#more_videos").html("<div class='spinner'><div class='bounce1'></div><div class='bounce2'></div><div class='bounce3'></div></div>");
        return more_videos_yes();
      });
      return this.update();
    }

  };

  video_lister = new video_lister();

  // video_player.coffee
  video_playing = class video_playing {
    constructor() {
      this.render = this.render.bind(this);
    }

    render() {
      var date_added, init_url, query, real_url, user_address, video_box, video_info, video_player;
      init_url = Page.history_state["url"];
      real_url = init_url.split("Video=")[1];
      date_added = real_url.split("_")[0];
      user_address = real_url.split("_")[1];
      video_player = $("<div></div>");
      video_player.attr("id", "video_player");
      video_player.attr("class", "video_player");
      video_box = $("<div></div>");
      video_box.attr("id", "video_box");
      video_box.attr("class", "video_box");
      video_info = $("<div></div>");
      video_info.attr("id", "player_info");
      video_info.attr("class", "player_info");
      query = "SELECT * FROM file LEFT JOIN json USING (json_id) WHERE date_added='" + date_added + "' AND directory='" + user_address + "'";
      Page.cmd("dbQuery", [query], (res1) => {
        return Page.cmd("optionalFileList", {
          filter: "",
          limit: 1000
        }, (res2) => {
          var file_name, i, k, len, my_file, my_row, optional_name, optional_peer, optional_seed, user_directory, video_actual, video_channel, video_description, video_title;
          my_row = res1[0];
          file_name = my_row['file_name'];
          video_title = my_row['title'];
          video_channel = my_row['cert_user_id'];
          video_description = my_row['description'];
          user_directory = my_row['directory'];
          for (i = k = 0, len = res2.length; k < len; i = ++k) {
            my_file = res2[i];
            optional_name = my_file['inner_path'].replace(/.*\//, "");
            optional_peer = my_file['peer'];
            optional_seed = my_file['peer_seed'];
            if (optional_name === file_name) {
              $("#player_info").append("<span style='font-size: 17.5px'>" + video_title + "</span><br>");
              $("#player_info").append("<span style='color: #a8a8a8'>" + video_channel + "</span><br>");
              $("#player_info").append("<span style='color: #a8a8a8'>Peers - " + optional_seed + " / " + optional_peer + "</span><br>");
              $("#player_info").append("<span style='color: #a8a8a8'>" + video_description + "</span>");
            }
          }
          video_actual = $("<video></video>");
          video_actual.attr("id", "video_actual");
          video_actual.attr("class", "video_actual");
          video_actual.attr("src", "data/users/" + user_directory + "/" + file_name);
          video_actual.attr("controls", true);
          return $("#video_box").append(video_actual);
        });
      });
      $("#main").attr("class", "main_nomenu");
      $("#main").html("");
      donav();
      //$("#nav").hide()
      //$("#main").attr "style", "width: 100%; margin-left: 0px"
      $("#main").append(video_player);
      $("#video_player").append(video_box);
      return $("#video_player").append(video_info);
    }

  };

  video_playing = new video_playing();

  // editor.coffee
  editor = class editor {
    constructor() {
      this.check_content_json = this.check_content_json.bind(this);
      this.register_info = this.register_info.bind(this);
      this.save_info = this.save_info.bind(this);
      this.render = this.render.bind(this);
    }

    check_content_json(cb) {
      var inner_path;
      inner_path = "data/users/" + Page.site_info.auth_address + "/content.json";
      return Page.cmd("fileGet", [inner_path, false], (res) => {
        var optional_pattern;
        if (res) {
          res = JSON.parse(res);
        }
        if (res == null) {
          res = {};
        }
        optional_pattern = "(?!data.json)";
        if (res.optional === optional_pattern) {
          return cb();
        }
        res.optional = optional_pattern;
        return Page.cmd("fileWrite", [inner_path, Text.fileEncode(res)], cb);
      });
    }

    register_info(v_file, v_date, v_size, v_title, v_description, v_image, cb) {
      var inner_path;
      inner_path = "data/users/" + Page.site_info.auth_address + "/data.json";
      return Page.cmd("fileGet", [inner_path, false], (res) => {
        if (res) {
          res = JSON.parse(res);
        }
        if (res === null) {
          res = {};
        }
        if (res.file === null) {
          res.file = {};
        }
        res.file[v_file] = {
          title: v_title,
          date_added: v_date,
          size: v_size,
          description: v_description,
          image_link: v_image
        };
        return Page.cmd("fileWrite", [inner_path, Text.fileEncode(res)], cb);
      });
    }

    save_info(v_file, v_date, v_size, v_title, v_description, v_image) {
      var register_info;
      register_info = this.register_info;
      return this.check_content_json((res) => {
        return register_info(v_file, v_date, v_size, v_title, v_description, v_image, (res) => {
          return Page.cmd("siteSign", {
            inner_path: "data/users/" + Page.site_info.auth_address + "/content.json"
          }, function(res) {
            return Page.cmd("sitePublish", {
              inner_path: "data/users/" + Page.site_info.auth_address + "/content.json",
              "sign": false
            }, function(res) {
              return Page.set_url("?Box");
            });
          });
        });
      });
    }

    render() {
      var date_added, editorbox, init_url, query, real_url, user_address;
      console.log("[KopyKate: Rendering editor.]");
      init_url = Page.history_state["url"];
      real_url = init_url.split("Editor=")[1];
      date_added = real_url.split("_")[0];
      user_address = real_url.split("_")[1];
      editorbox = $("<div></div>");
      editorbox.attr("id", "editor");
      editorbox.attr("class", "editor");
      query = "SELECT * FROM file LEFT JOIN json USING (json_id) WHERE date_added='" + date_added + "' AND directory='" + user_address + "'";
      Page.cmd("dbQuery", [query], (res) => {
        var brief_div, brief_input, brief_label, editor_container, editor_submit, file_name, my_row, save_info, title_div, title_input, title_label, user_directory, video_date_added, video_description, video_image, video_size, video_title, video_type;
        if (res.length === 0) {
          return $("#editor").html("<span>Error: No such video found!</span>");
        } else {
          my_row = res[0];
          file_name = my_row['file_name'];
          video_title = my_row['title'];
          video_type = my_row['type'];
          video_image = my_row['image_link'];
          video_description = my_row['description'];
          video_date_added = my_row['date_added'];
          video_size = my_row['size'];
          user_directory = my_row['directory'];
          if (user_directory === Page.site_info.auth_address) {
            editor_container = $("<div></div>");
            editor_container.attr("id", "editor_container");
            editor_container.attr("class", "editor_container");
            editor_submit = $("<button></button>");
            editor_submit.attr("id", "editor_submit_button");
            editor_submit.attr("class", "standard_button");
            editor_submit.text("PUBLISH");
            title_div = $("<div></div>");
            title_div.attr("id", "title_row");
            title_div.attr("class", "editor_row");
            title_label = $("<label></label>");
            title_label.attr("for", "editor_title");
            title_label.attr("class", "editor_input_label");
            title_label.text("Title");
            title_input = $("<input>");
            title_input.attr("id", "editor_title");
            title_input.attr("class", "editor_input");
            title_input.attr("type", "text");
            title_input.attr("name", "editor_title");
            title_input.attr("value", video_title);
            brief_div = $("<div></div>");
            brief_div.attr("id", "brief_row");
            brief_div.attr("class", "editor_row");
            brief_label = $("<label></label>");
            brief_label.attr("for", "editor_brief");
            brief_label.attr("class", "editor_input_label");
            brief_label.text("Description");
            brief_input = $("<input>");
            brief_input.attr("id", "editor_brief");
            brief_input.attr("class", "editor_input");
            brief_input.attr("type", "text");
            brief_input.attr("name", "editor_brief");
            brief_input.attr("value", video_description);
            $("#editor").append(editor_container);
            $("#editor_container").append(title_label);
            $("#editor_container").append(title_input);
            $("#editor_container").append("<br>");
            $("#editor_container").append(brief_label);
            $("#editor_container").append(brief_input);
            $("#editor_container").append("<br>");
            $("#editor_container").append(editor_submit);
            save_info = this.save_info;
            return $("#editor_submit_button").on("click", function(e) {
              save_info(file_name, video_date_added, video_size, $("#editor_title").val(), $("#editor_brief").val(), video_image);
              return e.preventDefault();
            });
          } else {
            return $("#editor").html("<span>Error: Permission denied!</span>");
          }
        }
      });
      $("#main").attr("class", "main_nomenu");
      $("#main").html("");
      donav();
      //$("#nav").hide()
      //$("#main").attr "style", "width: 100%; margin-left: 0px"
      return $("#main").append(editorbox);
    }

  };

  editor = new editor();

  // uploader.coffee
  uploader = class uploader {
    constructor() {
      var file_info;
      this.check_content_json = this.check_content_json.bind(this);
      this.register_upload = this.register_upload.bind(this);
      this.upload_done = this.upload_done.bind(this);
      this.upload_file = this.upload_file.bind(this);
      this.render = this.render.bind(this);
      file_info = {};
    }

    check_content_json(cb) {
      var inner_path;
      inner_path = "data/users/" + Page.site_info.auth_address + "/content.json";
      return Page.cmd("fileGet", [inner_path, false], (res) => {
        var optional_pattern;
        if (res) {
          res = JSON.parse(res);
        }
        if (res === null) {
          res = {};
        }
        optional_pattern = "(?!data.json)";
        if (res.optional === optional_pattern) {
          cb();
        }
        res.optional = optional_pattern;
        return Page.cmd("fileWrite", [inner_path, Text.fileEncode(res)], cb);
      });
    }

    register_upload(title, type, description, image_link, file_name, file_size, date_added, cb) {
      var inner_path;
      inner_path = "data/users/" + Page.site_info.auth_address + "/data.json";
      return Page.cmd("fileGet", [inner_path, false], (res) => {
        if (res) {
          res = JSON.parse(res);
        }
        if (res === null) {
          res = {};
        }
        res.file[file_name] = {
          title: title,
          type: type,
          description: description,
          image_link: image_link,
          size: file_size,
          date_added: date_added
        };
        return Page.cmd("fileWrite", [inner_path, Text.fileEncode(res)], cb);
      });
    }

    upload_done(files, date_added, user_address) {
      Page.set_url("?Editor=" + date_added + "_" + user_address);
      return console.log("Upload done!", files);
    }

    upload_file(files) {
      var file_info, ref2, register_upload, time_stamp, upload_done;
      time_stamp = Math.floor(new Date() / 1000);
      console.log("Uploading: " + files.name);
      if (files.size > 2000 * 1024 * 1024) {
        Page.cmd("wrapperNotification", ["info", "Maximum file size on this site: 2000MB"]);
        $("#uploader_title").html("<span>Error!</span>");
        return false;
      }
      if (files.size < 1 * 1024 * 1024) {
        Page.cmd("wrapperNotification", ["info", "Minimum file size: 1MB"]);
        $("#uploader_title").html("<span>Error!</span>");
        return false;
      }
      if ((ref2 = files.name.split(".").slice(-1)[0]) !== "mp4" && ref2 !== "m4v" && ref2 !== "webm") {
        Page.cmd("wrapperNotification", ["info", "Only mp4, m4v and webm allowed on this site!"]);
        $("#uploader_title").html("<span>Error!</span>");
        debugger;
        return false;
      }
      file_info = this.file_info = {};
      register_upload = this.register_upload;
      upload_done = this.upload_done;
      return this.check_content_json((res) => {
        var file_name;
        file_name = time_stamp + "-" + files.name;
        return Page.cmd("bigfileUploadInit", ["data/users/" + Page.site_info.auth_address + "/" + file_name, files.size], function(init_res) {
          var formdata, req;
          formdata = new FormData();
          formdata.append(file_name, files);
          req = new XMLHttpRequest();
          this.req = req;
          file_info = {
            size: files.size,
            name: file_name,
            type: files.type,
            url: init_res.url
          };
          req.upload.addEventListener("loadstart", function(progress) {
            console.log("loadstart", arguments);
            return file_info.started = progress.timeStamp;
          });
          req.upload.addEventListener("loadend", function() {
            var default_description, default_image, default_type;
            default_type = "720p";
            default_image = "img/video_empty.png";
            default_description = "Write description here!";
            console.log("loadend", arguments);
            file_info.status = "done";
            return register_upload(files.name, default_type, default_description, default_image, init_res.file_relative_path, files.size, time_stamp, function(res) {
              return Page.cmd("siteSign", {
                inner_path: "data/users/" + Page.site_info.auth_address + "/content.json"
              }, function(res) {
                return Page.cmd("sitePublish", {
                  inner_path: "data/users/" + Page.site_info.auth_address + "/content.json",
                  "sign": false
                }, function(res) {
                  return upload_done(files, time_stamp, Page.site_info.auth_address);
                });
              });
            });
          });
          req.upload.addEventListener("progress", function(progress) {
            file_info.speed = 1000 * progress.loaded / (progress.timeStamp - file_info.started);
            file_info.percent = progress.loaded / progress.total;
            file_info.loaded = progress.loaded;
            return file_info.updated = progress.timeStamp;
          });
          req.addEventListener("load", function() {
            return console.log("load", arguments);
          });
          req.addEventListener("error", function() {
            return console.log("error", arguments);
          });
          req.addEventListener("abort", function() {
            return console.log("abort", arguments);
          });
          req.withCredentials = true;
          req.open("POST", init_res.url);
          return req.send(formdata);
        });
      });
    }

    render() {
      var upload_container, upload_file, uploader_input, uploader_input_label, uploader_title, video_uploader;
      video_uploader = $("<div></div>");
      video_uploader.attr("id", "uploader");
      video_uploader.attr("class", "uploader");
      uploader_title = $("<div></div>");
      uploader_title.attr("id", "uploader_title");
      uploader_title.attr("class", "uploader_title");
      uploader_title.text("Upload your video here!");
      upload_container = $("<div></div>");
      upload_container.attr("id", "upload_container");
      upload_container.attr("class", "upload_container");
      uploader_input = $("<input>");
      uploader_input.attr("id", "uploader_input");
      uploader_input.attr("class", "uploader_input");
      uploader_input.attr("name", "uploader_input");
      uploader_input.attr("type", "file");
      uploader_input_label = $("<label></label>");
      uploader_input_label.attr("id", "uploader_input_label");
      uploader_input_label.attr("class", "uploader_input_label");
      uploader_input_label.attr("for", "uploader_input");
      upload_file = this.upload_file;
      $("#main").attr("class", "main_nomenu");
      $("#main").html("");
      donav();
      //$("#nav").hide()
      //$("#main").attr "style", "width: 100%; margin-left: 0px"
      $("#main").append(video_uploader);
      $("#uploader").append(uploader_title);
      $("#uploader").append(upload_container);
      $("#upload_container").append(uploader_input);
      $("#upload_container").append(uploader_input_label);
      return $(document).on("change", ".uploader_input", function() {
        if (Page.site_info.cert_user_id) {
          $("#uploader_title").html("<div class='spinner'><div class='bounce1'></div><div class='bounce2'></div><div class='bounce3'></div></div>");
          console.log("[KopyKate: Uploading file.]");
          upload_file(this.files[0]);
        } else {
          Page.cmd("certSelect", [["zeroid.bit"]], (res) => {
            $("#uploader_title").html("<div class='spinner'><div class='bounce1'></div><div class='bounce2'></div><div class='bounce3'></div></div>");
            console.log("KopyKate: Uploading file.");
            return upload_file(this.files[0]);
          });
        }
        return false;
      });
    }

  };

  uploader = new uploader();

  // videobox.coffee
  videobox = class videobox {
    constructor() {
      this.more_videos_yes = this.more_videos_yes.bind(this);
      this.flush = this.flush.bind(this);
      this.get_query = this.get_query.bind(this);
      this.delete_from_content_json = this.delete_from_content_json.bind(this);
      this.delete_from_data_json = this.delete_from_data_json.bind(this);
      this.delete_video = this.delete_video.bind(this);
      this.update = this.update.bind(this);
      this.render = this.render.bind(this);
      this.max_videos = 10;
      this.query_string = "";
      this.counter = 1;
    }

    more_videos_yes() {
      this.max_videos += 10;
      this.counter = 1;
      return this.update();
    }

    flush(mode) {
      if (mode === "all") {
        this.max_videos = 10;
        return this.counter = 1;
      } else {
        return this.counter = 1;
      }
    }

    get_query() {
      var query_value;
      query_value = $("#search_bar").val();
      this.query_string = query_value;
      this.flush("all");
      return this.update();
    }

    delete_from_content_json(inner_path, cb) {
      var content_inner_path, video_directory, video_name;
      video_directory = inner_path.split("/")[2];
      video_name = inner_path.split("/")[3];
      content_inner_path = "data/users/" + video_directory + "/content.json";
      console.log("deleting from content.json at directory: " + video_directory + "and file: " + video_name);
      return Page.cmd("fileGet", content_inner_path, (res) => {
        var data;
        data = JSON.parse(res);
        delete data["files_optional"][video_name];
        delete data["files_optional"][video_name + ".piecemap.msgpack"];
        return Page.cmd("fileWrite", [content_inner_path, Text.fileEncode(data)], (res) => {
          return typeof cb === "function" ? cb(res) : void 0;
        });
      });
    }

    delete_from_data_json(inner_path, cb) {
      var data_inner_path, video_directory, video_name;
      video_directory = inner_path.split("/")[2];
      video_name = inner_path.split("/")[3];
      data_inner_path = "data/users/" + video_directory + "/data.json";
      console.log("deleting from data.json at directory: " + video_directory + "and file: " + video_name);
      return Page.cmd("fileGet", data_inner_path, (res) => {
        var data;
        data = JSON.parse(res);
        delete data["file"][video_name];
        delete data["file"][video_name + ".piecemap.msgpack"];
        return Page.cmd("fileWrite", [data_inner_path, Text.fileEncode(data)], (res) => {
          return typeof cb === "function" ? cb(res) : void 0;
        });
      });
    }

    delete_video(video) {
      var content_inner_path, delete_from_content_json, delete_from_data_json, this_flush, this_update, video_directory;
      delete_from_data_json = this.delete_from_data_json;
      delete_from_content_json = this.delete_from_content_json;
      video_directory = video.split("/")[2];
      content_inner_path = "data/users/" + video_directory + "/content.json";
      this_flush = this.flush;
      this_update = this.update;
      return Page.cmd("wrapperConfirm", ["Are you sure?", "Delete"], () => {
        return delete_from_content_json(video, function(res) {
          if (!res === "ok") {
            return cb(false);
          }
          return delete_from_data_json(video, function(res) {
            if (res === "ok") {
              Page.cmd("sitePublish", {
                "inner_path": content_inner_path
              });
              console.log("[KopyKate: Deleted video " + video + "]");
              this_flush("all");
              return this_update();
            }
          });
        });
      });
    }

    update() {
      var query, query_string_no_space;
      console.log("[KopyKate: Retrieving videobox]");
      query_string_no_space = this.query_string.replace(/\s/g, "%");
      query = "WHERE file.title LIKE '%" + query_string_no_space + "%'";
      return Page.cmd("dbQuery", ["SELECT * FROM file LEFT JOIN json USING (json_id) " + query + " ORDER BY date_added DESC"], (res1) => {
        return Page.cmd("optionalFileList", {
          filter: "",
          limit: 1000
        }, (res2) => {
          var delete_video, file_name, file_peer, file_seed, file_seed_no_null, i, j, k, len, optional_path, results, row1, row2, video_brief, video_date_added, video_delete_link, video_delete_link_id, video_edit_link, video_edit_link_id, video_image, video_link, video_link_id, video_name, video_row, video_row_id, video_string, video_title, video_user_address;
          $("#videobox").html("");
          $("#more_videos").html("<div class='more_videos text'>More videos!</div>");
          results = [];
          for (i = k = 0, len = res1.length; k < len; i = ++k) {
            row1 = res1[i];
            results.push((function() {
              var l, len1, results1;
              results1 = [];
              for (j = l = 0, len1 = res2.length; l < len1; j = ++l) {
                row2 = res2[j];
                optional_path = row2['inner_path'];
                file_name = row2['inner_path'].replace(/.*\//, "");
                file_seed = row2['peer_seed'];
                file_peer = row2['peer'];
                video_name = row1['file_name'];
                video_title = row1['title'];
                video_brief = row1['description'];
                video_image = row1['image_link'];
                video_date_added = row1['date_added'];
                video_user_address = row1['directory'];
                if (video_name === file_name && video_user_address === Page.site_info.auth_address && this.counter < this.max_videos) {
                  file_seed_no_null = file_seed || 0;
                  video_string = video_date_added + "_" + video_user_address;
                  video_row_id = "boxrow_" + this.counter;
                  video_link_id = video_string;
                  video_row = $("<div></div>");
                  video_row.attr("id", video_row_id);
                  video_row.attr("class", "videobox_row");
                  video_edit_link_id = "edit_" + this.counter;
                  video_edit_link = $("<a></a>");
                  video_edit_link.attr("id", video_edit_link_id);
                  video_edit_link.attr("class", "editor_button");
                  video_edit_link.attr("href", "?Editor=" + video_string);
                  video_delete_link_id = "delete_" + this.counter;
                  video_delete_link = $("<button></button>");
                  video_delete_link.attr("id", video_delete_link_id);
                  video_delete_link.attr("class", "delete_button");
                  video_delete_link.attr("value", optional_path);
                  video_link_id = "vlink_" + video_string;
                  video_link = $("<a></a>");
                  video_link.attr("id", video_link_id);
                  video_link.attr("class", "video_link edit_link");
                  video_link.attr("href", "?Video=" + video_string);
                  video_link.text(video_title);
                  $("#videobox").append(video_row);
                  $("#" + video_row_id).append(video_delete_link);
                  $("#" + video_row_id).append(video_edit_link);
                  $("#" + video_row_id).append(video_link);
                  delete_video = this.delete_video;
                  $("#" + video_delete_link_id).on("click", function() {
                    return delete_video(this.value);
                  });
                  $("#" + video_edit_link_id).on("click", function() {
                    return Page.nav(this.href);
                  });
                  $("#" + video_link_id).on("click", function() {
                    return Page.nav(this.href);
                  });
                  results1.push(this.counter = this.counter + 1);
                } else {
                  results1.push(void 0);
                }
              }
              return results1;
            }).call(this));
          }
          return results;
        });
      });
    }

    render() {
      var footer, more_videos, more_videos_yes, query_value, videobox_div;
      query_value = $("#search_bar").val();
      this.query_string = query_value;
      videobox_div = $("<div></div>");
      videobox_div.attr("id", "videobox");
      videobox_div.attr("class", "videobox");
      footer = $("<div></div>");
      footer.attr("id", "footer");
      footer.attr("class", "footer");
      more_videos = $("<a></a>");
      more_videos.attr("id", "more_videos");
      more_videos.attr("class", "more_videos");
      more_videos.attr("href", "javascript:void(0)");
      $("#main").attr("class", "main");
      $("#main").html("");
      donav();
      //$("#main").attr "style", "width: calc(100% - 236.25px); margin-left: 236.25px"
      //$("#nav").show()
      $("#main").append(videobox_div);
      $("#main").append(footer);
      $("#footer").append(more_videos);
      $("#more_videos").html("<div class='spinner'><div class='bounce1'></div><div class='bounce2'></div><div class='bounce3'></div></div>");
      more_videos_yes = this.more_videos_yes;
      $("#more_videos").on("click", function() {
        $("#more_videos").html("<div class='spinner'><div class='bounce1'></div><div class='bounce2'></div><div class='bounce3'></div></div>");
        return more_videos_yes();
      });
      //delete_videos = @delete_videos
      //$("#videobox_form").on "submit", (e) ->
      //  delete_videos(this)
      //  e.preventDefault()
      return this.update();
    }

  };

  videobox = new videobox();

  // seedbox.coffee
  seedbox = class seedbox {
    constructor() {
      this.more_videos_yes = this.more_videos_yes.bind(this);
      this.flush = this.flush.bind(this);
      this.get_query = this.get_query.bind(this);
      this.delete_optional_files = this.delete_optional_files.bind(this);
      this.update = this.update.bind(this);
      this.render = this.render.bind(this);
      this.max_videos = 10;
      this.query_string = "";
      this.counter = 1;
    }

    more_videos_yes() {
      this.max_videos += 10;
      this.counter = 1;
      return this.update();
    }

    flush(mode) {
      if (mode === "all") {
        this.max_videos = 10;
        return this.counter = 1;
      } else {
        return this.counter = 1;
      }
    }

    get_query() {
      var query_value;
      query_value = $("#search_bar").val();
      this.query_string = query_value;
      this.flush("all");
      return this.update();
    }

    delete_optional_files(form) {
      var bigfile_row, bigfiles, i, k, l, len, len1, value_row, values;
      values = [];
      bigfiles = form.bigfile;
      for (i = k = 0, len = bigfiles.length; k < len; i = ++k) {
        bigfile_row = bigfiles[i];
        if (bigfile_row.checked) {
          values.push(bigfile_row.value);
        }
      }
      for (i = l = 0, len1 = values.length; l < len1; i = ++l) {
        value_row = values[i];
        Page.cmd("optionalFileDelete", value_row);
        Page.cmd("optionalFileDelete", value_row + ".piecemap.msgpack");
        console.log("[KopyKate: Deleted optional file " + value_row + "]");
      }
      this.flush("all");
      return this.update();
    }

    update() {
      var query, query_string_no_space;
      console.log("[KopyKate: Retrieving seedbox]");
      query_string_no_space = this.query_string.replace(/\s/g, "%");
      query = "WHERE file.title LIKE '%" + query_string_no_space + "%'";
      return Page.cmd("dbQuery", ["SELECT * FROM file LEFT JOIN json USING (json_id) " + query + " ORDER BY date_added DESC"], (res1) => {
        return Page.cmd("optionalFileList", {
          filter: "downloaded,bigfile",
          limit: 1000
        }, (res2) => {
          var checkbox_label, checkbox_label_id, checkmark_span, file_name, file_peer, file_seed, file_seed_no_null, i, j, k, len, optional_path, results, row1, row2, video_brief, video_checkbox, video_checkbox_id, video_date_added, video_image, video_link, video_link_id, video_name, video_row, video_row_id, video_string, video_title, video_user_address;
          $("#seedbox_actual_list").html("");
          $("#more_videos").html("<div class='more_videos text'>More videos!</div>");
          results = [];
          for (i = k = 0, len = res1.length; k < len; i = ++k) {
            row1 = res1[i];
            results.push((function() {
              var l, len1, results1;
              results1 = [];
              for (j = l = 0, len1 = res2.length; l < len1; j = ++l) {
                row2 = res2[j];
                optional_path = row2['inner_path'];
                file_name = row2['inner_path'].replace(/.*\//, "");
                file_seed = row2['peer_seed'];
                file_peer = row2['peer'];
                video_name = row1['file_name'];
                video_title = row1['title'];
                video_brief = row1['description'];
                video_image = row1['image_link'];
                video_date_added = row1['date_added'];
                video_user_address = row1['directory'];
                if (video_name === file_name && this.counter < this.max_videos) {
                  file_seed_no_null = file_seed || 0;
                  video_string = video_date_added + "_" + video_user_address;
                  video_row_id = "seedrow_" + this.counter;
                  video_link_id = video_string;
                  video_row = $("<div></div>");
                  video_row.attr("id", video_row_id);
                  video_row.attr("class", "seedbox_row");
                  video_checkbox_id = "vcheck_" + this.counter;
                  video_checkbox = $("<input>");
                  video_checkbox.attr("id", video_checkbox_id);
                  video_checkbox.attr("type", "checkbox");
                  video_checkbox.attr("name", "bigfile");
                  video_checkbox.attr("value", optional_path);
                  video_checkbox.attr("style", "display: none");
                  checkbox_label_id = "vcheck_label_" + this.counter;
                  checkbox_label = $("<label></label>");
                  checkbox_label.attr("id", checkbox_label_id);
                  checkbox_label.attr("class", "checkbox_container");
                  checkmark_span = $("<span></span>");
                  checkmark_span.attr("class", "checkmark");
                  video_link_id = "link_" + video_string;
                  video_link = $("<a></a>");
                  video_link.attr("id", video_link_id);
                  video_link.attr("class", "video_link edit_link");
                  video_link.attr("href", "?Video=" + video_string);
                  video_link.text(video_title);
                  $("#seedbox_actual_list").append(video_row);
                  $("#" + video_row_id).append(checkbox_label);
                  $("#" + checkbox_label_id).append(video_checkbox);
                  $("#" + checkbox_label_id).append(checkmark_span);
                  $("#" + video_row_id).append(video_link);
                  $("#" + video_link_id).on("click", function() {
                    return Page.nav(this.href);
                  });
                  results1.push(this.counter = this.counter + 1);
                } else {
                  results1.push(void 0);
                }
              }
              return results1;
            }).call(this));
          }
          return results;
        });
      });
    }

    render() {
      var checkbox_buttons, delete_optional_files, footer, more_videos, more_videos_yes, query_value, seedbox_actual_list, seedbox_div, seedbox_form;
      query_value = $("#search_bar").val();
      this.query_string = query_value;
      seedbox_div = $("<div></div>");
      seedbox_div.attr("id", "seedbox");
      seedbox_div.attr("class", "seedbox");
      //seedbox_div.html "<div class='spinner'><div class='bounce1'></div><div class='bounce2'></div><div class='bounce3'></div></div>"
      seedbox_form = $("<form></form>");
      seedbox_form.attr("id", "seedbox_form");
      seedbox_actual_list = $("<div></div>");
      seedbox_actual_list.attr("id", "seedbox_actual_list");
      checkbox_buttons = $("<div></div>");
      checkbox_buttons.attr("id", "checkbox_buttons");
      footer = $("<div></div>");
      footer.attr("id", "footer");
      footer.attr("class", "footer");
      more_videos = $("<a></a>");
      more_videos.attr("id", "more_videos");
      more_videos.attr("class", "more_videos");
      more_videos.attr("href", "javascript:void(0)");
      $("#main").attr("class", "main");
      $("#main").html("");
      donav();
      //$("#main").attr "style", "width: calc(100% - 236.25px); margin-left: 236.25px"
      //$("#nav").show()
      $("#main").append(seedbox_div);
      $("#seedbox").append(seedbox_form);
      $("#seedbox_form").append(checkbox_buttons);
      $("#checkbox_buttons").html("<label class='file_button' for='deselect_seed'>DESELECT</label><label class='file_button' for='delete_seed'>DELETE</label><input type='reset' id='deselect_seed' value='Deselect' style='display: none'><input type='submit' id='delete_seed' value='Delete' style='display: none'>");
      $("#seedbox_form").append(seedbox_actual_list);
      $("#main").append(footer);
      $("#footer").append(more_videos);
      $("#more_videos").html("<div class='spinner'><div class='bounce1'></div><div class='bounce2'></div><div class='bounce3'></div></div>");
      more_videos_yes = this.more_videos_yes;
      $("#more_videos").on("click", function() {
        $("#more_videos").html("<div class='spinner'><div class='bounce1'></div><div class='bounce2'></div><div class='bounce3'></div></div>");
        return more_videos_yes();
      });
      delete_optional_files = this.delete_optional_files;
      $("#seedbox_form").on("submit", function(e) {
        delete_optional_files(this);
        return e.preventDefault();
      });
      return this.update();
    }

  };

  seedbox = new seedbox();

  Page = class Page extends ZeroFrame {
    constructor() {
      var already_rendered;
      super();
      this.render = this.render.bind(this);
      this.set_site_info = this.set_site_info.bind(this);
      this.update_site_info = this.update_site_info.bind(this);
      this.onOpenWebsocket = this.onOpenWebsocket.bind(this);
      this.onRequest = this.onRequest.bind(this);
      this.project_this = this.project_this.bind(this);
      this.route = this.route.bind(this);
      this.set_url = this.set_url.bind(this);
      this.nav = this.nav.bind(this);
      already_rendered = false;
    }

    render() {
      var url;
      boundMethodCheck(this, Page);
      this.already_rendered = true;
      top_menuify.render();
      left_menuify.render();
      if (base.href.indexOf("?") === -1) {
        this.route("", "home");
        this.state = {};
        this.state.page = "home";
      } else {
        url = base.href.replace(/.*?\?/, "");
        this.history_state["url"] = url;
        if (base.href.indexOf("Video") > -1) {
          this.route(url, "video");
          this.state = {};
          this.state.page = "video";
        } else if (base.href.indexOf("Upload") > -1) {
          this.route(url, "upload");
          this.state = {};
          this.state.page = "upload";
        } else if (base.href.indexOf("Editor") > -1) {
          this.route(url, "editor");
          this.state = {};
          this.state.page = "editor";
        } else if (base.href.indexOf("Box") > -1) {
          this.route(url, "box");
          this.state = {};
          this.state.page = "box";
        } else if (base.href.indexOf("Seed") > -1) {
          this.route(url, "seed");
          this.state = {};
          this.state.page = "seedbox";
        } else if (base.href.indexOf("Home") > -1) {
          this.route("", "home");
          this.state = {};
          this.state.page = "home";
        }
      }
      this.on_site_info = new Promise();
      return this.on_loaded = new Promise();
    }

    set_site_info(site_info) {
      boundMethodCheck(this, Page);
      return this.site_info = site_info;
    }

    update_site_info() {
      boundMethodCheck(this, Page);
      return this.cmd("siteInfo", {}, (site_info) => {
        this.address = site_info.address;
        this.set_site_info(site_info);
        return this.on_site_info.resolve();
      });
    }

    onOpenWebsocket() {
      boundMethodCheck(this, Page);
      this.update_site_info();
      if (this.already_rendered) {
        return console.log("[KopyKate: Websocket opened]");
      } else {
        this.render();
        return console.log("[KopyKate: Websocket opened]");
      }
    }

    onRequest(cmd, params) {
      var ref2, ref3;
      boundMethodCheck(this, Page);
      console.log("[KopyKate: Request]");
      if (cmd === "setSiteInfo") {
        this.set_site_info(params);
        if ((ref2 = (ref3 = params.event) != null ? ref3[0] : void 0) === "file_done" || ref2 === "file_delete" || ref2 === "peernumber_updated") {
          return RateLimit(1000, () => {
            return console.log("[KopyKate: Something changed!]");
          });
        }
      //video_lister.flush()
      //video_lister.update()
      } else if (cmd === "wrapperPopState") {
        if (params.state) {
          if (!params.state.url) {
            params.state.url = params.href.replace(/.*\?/, "");
          }
          this.on_loaded.resolved = false;
          document.body.className = "";
          window.scroll(window.pageXOffset, params.state.scrollTop || 0);
          return this.route(params.state.url || "");
        }
      }
    }

    project_this(mode) {
      boundMethodCheck(this, Page);
      console.log("[KopyKate: Mode (" + mode + ")]");
      if (mode === "home") {
        video_lister.max_videos = 10;
        video_lister.counter = 1;
        return video_lister.render();
      } else if (mode === "video") {
        return video_playing.render();
      } else if (mode === "upload") {
        return uploader.render();
      } else if (mode === "editor") {
        return editor.render();
      } else if (mode === "box") {
        videobox.max_videos = 10;
        videobox.counter = 1;
        return videobox.render();
      } else if (mode === "seed") {
        seedbox.max_videos = 10;
        seedbox.counter = 1;
        return seedbox.render();
      }
    }

    route(query) {
      boundMethodCheck(this, Page);
      query = JSON.stringify(query);
      console.log("[KopyKate: Routing (" + query + ")]");
      if (query.indexOf("Video") > -1) {
        return this.project_this("video");
      } else if (query.indexOf("Upload") > -1) {
        return this.project_this("upload");
      } else if (query.indexOf("Editor") > -1) {
        return this.project_this("editor");
      } else if (query.indexOf("Box") > -1) {
        return this.project_this("box");
      } else if (query.indexOf("Seed") > -1) {
        return this.project_this("seed");
      } else {
        return this.project_this("home");
      }
    }

    set_url(url) {
      boundMethodCheck(this, Page);
      url = url.replace(/.*?\?/, "");
      console.log("[KopyKate: Setting url (FROM " + this.history_state["url"] + " TO -> " + url + ")]");
      if (this.history_state["url"] === url) {
        return false;
      }
      this.history_state["url"] = url;
      this.cmd("wrapperPushState", [this.history_state, "", url]);
      this.route(url);
      return false;
    }

    nav(identifier) {
      boundMethodCheck(this, Page);
      if (identifier === null) {
        return true;
      } else {
        console.log("save scrollTop", window.pageYOffset);
        this.history_state["scrollTop"] = window.pageYOffset;
        this.cmd("wrapperReplaceState", [this.history_state, null]);
        window.scroll(window.pageXOffset, 0);
        this.history_state["scroll_top"] = 0;
        this.on_loaded.resolved = false;
        document.body.className = "";
        this.set_url(identifier);
        return false;
      }
    }

  };

  Page = new Page();

}).call(this);
